{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport UserLogins from './UserLogins.vue';\nimport LoginChart from './LoginChart.vue';\nimport UploadsChart from './UploadsChart.vue';\nimport FeatureFlags from './FeatureFlags.vue';\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, getDocs } from 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: 'AIzaSyD0-Gcro2-YgPSdeDuoiHmXRq9akRteGKg',\n  authDomain: 'biscuitt-21b7d.firebaseapp.com',\n  databaseURL: \"https://biscuitt-21b7d.firebaseio.com\",\n  projectId: 'biscuitt-21b7d',\n  storageBucket: 'biscuitt-21b7d.appspot.com',\n  messagingSenderId: '138914182592',\n  appId: '1:138914182592:android:0ad3a72da157ea12534425'\n};\nexport default {\n  name: 'HomePage',\n  components: {\n    UserLogins,\n    LoginChart,\n    UploadsChart,\n    FeatureFlags\n  },\n  data() {\n    return {\n      // Initialize users with empty array, will be populated in mounted\n      users: []\n    };\n  },\n  async mounted() {\n    // Call your asynchronous function here and update users\n    await this.helloworld();\n  },\n  methods: {\n    async helloworld() {\n      // Simulating an asynchronous operation\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const firebaseApp = initializeApp(firebaseConfig);\n      const db = getFirestore(firebaseApp);\n      const loginsCollection = collection(db, 'logins');\n\n      // Get all documents in the \"logins\" collection\n      const snapshot = await getDocs(loginsCollection);\n\n      // Process each document in the snapshot\n      const users = [];\n      snapshot.forEach(doc => {\n        const data = doc.data();\n        console.log(data.username);\n        const user = {\n          id: 1,\n          name: data.username,\n          lastLogin: this.formatTimestamp(data.time)\n        };\n        users.push(user);\n      });\n\n      // Sort the users array based on the most recent timestamp\n      users.sort((a, b) => b.lastLogin.localeCompare(a.lastLogin));\n\n      // Update the users with the result\n      this.users = users.slice(0, 3);\n    },\n    formatTimestamp(timestamp) {\n      const date = timestamp.toDate();\n      return date.toLocaleString(); // Adjust the options as needed\n    }\n  }\n};","map":{"version":3,"names":["UserLogins","LoginChart","UploadsChart","FeatureFlags","initializeApp","getFirestore","collection","getDocs","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","name","components","data","users","mounted","helloworld","methods","Promise","resolve","setTimeout","firebaseApp","db","loginsCollection","snapshot","forEach","doc","console","log","username","user","id","lastLogin","formatTimestamp","time","push","sort","a","b","localeCompare","slice","timestamp","date","toDate","toLocaleString"],"sources":["/Users/shashaliu/Desktop/mobile/biscuitt_dashboard/biscuitt-dashboard/src/components/HomePage.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Biscuitt.ai Dashboard</h1>\n  </div>\n  <div style=\"background-color:#f0feff; padding: 5%; margin: 10px auto; display: inline-block;\">\n    <h2>User Login Info</h2>\n    <UserLogins :users=\"users\" />\n    <LoginChart :users=\"users\" />\n  </div>\n  <div style=\"background-color:#fff0f6; padding: 5%; margin: 10px auto; display: inline-block;\">\n    <h2>Transcript Uploads</h2>\n    <UploadsChart />\n  </div>\n  <div>\n    <div style=\"background-color:#fefff0; padding: 2%; margin: 10px auto;\">\n      <h2>Feature Flags</h2>\n      <FeatureFlags />\n    </div>\n  </div>\n</template>\n\n<script>\nimport UserLogins from './UserLogins.vue';\nimport LoginChart from './LoginChart.vue';\nimport UploadsChart from './UploadsChart.vue';\nimport FeatureFlags from './FeatureFlags.vue';\n\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, getDocs } from 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyD0-Gcro2-YgPSdeDuoiHmXRq9akRteGKg',\n  authDomain: 'biscuitt-21b7d.firebaseapp.com',\n  databaseURL: \"https://biscuitt-21b7d.firebaseio.com\",\n  projectId: 'biscuitt-21b7d',\n  storageBucket: 'biscuitt-21b7d.appspot.com',\n  messagingSenderId: '138914182592',\n  appId: '1:138914182592:android:0ad3a72da157ea12534425'\n};\n\nexport default {\n  name: 'HomePage',\n  components: {\n    UserLogins,\n    LoginChart,\n    UploadsChart,\n    FeatureFlags,\n  },\n\n  data() {\n    return {\n      // Initialize users with empty array, will be populated in mounted\n      users: [],\n    };\n  },\n\n  async mounted() {\n    // Call your asynchronous function here and update users\n    await this.helloworld();\n  },\n\n  methods: {\n    async helloworld() {\n    // Simulating an asynchronous operation\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const firebaseApp = initializeApp(firebaseConfig);\n    const db = getFirestore(firebaseApp);\n    const loginsCollection = collection(db, 'logins');\n\n    // Get all documents in the \"logins\" collection\n    const snapshot = await getDocs(loginsCollection);\n\n    // Process each document in the snapshot\n    const users = [];\n    snapshot.forEach((doc) => {\n      const data = doc.data();\n      console.log(data.username)\n      const user = {\n        id: 1,\n        name: data.username, \n        lastLogin: this.formatTimestamp(data.time), \n      };\n      users.push(user);\n    });\n\n    // Sort the users array based on the most recent timestamp\n    users.sort((a, b) => b.lastLogin.localeCompare(a.lastLogin));\n\n    // Update the users with the result\n    this.users = users.slice(0, 3);\n  },\n    formatTimestamp(timestamp) {\n    const date = timestamp.toDate();\n    return date.toLocaleString(); // Adjust the options as needed\n    },\n  },\n};\n</script>"],"mappings":";AAsBA,OAAOA,UAAS,MAAO,kBAAkB;AACzC,OAAOC,UAAS,MAAO,kBAAkB;AACzC,OAAOC,YAAW,MAAO,oBAAoB;AAC7C,OAAOC,YAAW,MAAO,oBAAoB;AAE7C,SAASC,aAAY,QAAS,cAAc;AAC5C,SAASC,YAAY,EAAEC,UAAU,EAAEC,OAAM,QAAS,oBAAoB;AAEtE,MAAMC,cAAa,GAAI;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,gCAAgC;EAC5CC,WAAW,EAAE,uCAAuC;EACpDC,SAAS,EAAE,gBAAgB;EAC3BC,aAAa,EAAE,4BAA4B;EAC3CC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;AAED,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,UAAU,EAAE;IACVjB,UAAU;IACVC,UAAU;IACVC,YAAY;IACZC;EACF,CAAC;EAEDe,IAAIA,CAAA,EAAG;IACL,OAAO;MACL;MACAC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EAED,MAAMC,OAAOA,CAAA,EAAG;IACd;IACA,MAAM,IAAI,CAACC,UAAU,CAAC,CAAC;EACzB,CAAC;EAEDC,OAAO,EAAE;IACP,MAAMD,UAAUA,CAAA,EAAG;MACnB;MACA,MAAM,IAAIE,OAAO,CAACC,OAAM,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;MACvD,MAAME,WAAU,GAAItB,aAAa,CAACI,cAAc,CAAC;MACjD,MAAMmB,EAAC,GAAItB,YAAY,CAACqB,WAAW,CAAC;MACpC,MAAME,gBAAe,GAAItB,UAAU,CAACqB,EAAE,EAAE,QAAQ,CAAC;;MAEjD;MACA,MAAME,QAAO,GAAI,MAAMtB,OAAO,CAACqB,gBAAgB,CAAC;;MAEhD;MACA,MAAMT,KAAI,GAAI,EAAE;MAChBU,QAAQ,CAACC,OAAO,CAAEC,GAAG,IAAK;QACxB,MAAMb,IAAG,GAAIa,GAAG,CAACb,IAAI,CAAC,CAAC;QACvBc,OAAO,CAACC,GAAG,CAACf,IAAI,CAACgB,QAAQ;QACzB,MAAMC,IAAG,GAAI;UACXC,EAAE,EAAE,CAAC;UACLpB,IAAI,EAAEE,IAAI,CAACgB,QAAQ;UACnBG,SAAS,EAAE,IAAI,CAACC,eAAe,CAACpB,IAAI,CAACqB,IAAI;QAC3C,CAAC;QACDpB,KAAK,CAACqB,IAAI,CAACL,IAAI,CAAC;MAClB,CAAC,CAAC;;MAEF;MACAhB,KAAK,CAACsB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACN,SAAS,CAACO,aAAa,CAACF,CAAC,CAACL,SAAS,CAAC,CAAC;;MAE5D;MACA,IAAI,CAAClB,KAAI,GAAIA,KAAK,CAAC0B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAChC,CAAC;IACCP,eAAeA,CAACQ,SAAS,EAAE;MAC3B,MAAMC,IAAG,GAAID,SAAS,CAACE,MAAM,CAAC,CAAC;MAC/B,OAAOD,IAAI,CAACE,cAAc,CAAC,CAAC,EAAE;IAC9B;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}